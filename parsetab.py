
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSAND DIVIDE EG ELSE EQUALS IF INF INFEG LPAREN MINUS NAME NEG NOT NUMBER OR PLUS RPAREN SEMICOLON SUP SUPEG THEN TIMESstatement : NAME EQUALS expressionstatement : expression\n                 | expression SEMICOLON statement\n                 | expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : expression EQUALS expressionexpression : expression SUP expression\n                  | expression INF expression\n                  | expression SUPEG expression\n                  | expression INFEG expression\n                  | expression EG expression\n                  | expression NEG expression\n                  | expression OR expression\n                  | expression AND expressionexpression : expression IF expression\n                  | expression THEN expression\n                  | expression ELSE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPAREN\n                  | expressionexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'INFEG':([3,4,5,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[9,-24,-25,-21,-25,9,9,9,-5,9,9,-7,9,9,9,-6,-8,9,9,9,9,9,9,-22,]),'EQUALS':([3,4,5,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[12,-24,26,-21,-25,12,12,12,-5,12,12,-7,12,12,12,-6,-8,12,12,12,12,12,12,-22,]),'NEG':([3,4,5,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[13,-24,-25,-21,-25,13,13,13,-5,13,13,-7,13,13,13,-6,-8,13,13,13,13,13,13,-22,]),'SEMICOLON':([3,4,5,7,8,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,46,],[14,-24,-25,-21,-25,-13,-20,-5,-9,-15,-7,-17,-12,-19,-6,-8,-10,-18,-14,-16,-11,-22,]),'ELSE':([3,4,5,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[10,-24,-25,-21,-25,10,10,10,-5,10,10,-7,10,10,10,-6,-8,10,10,10,10,10,10,-22,]),'TIMES':([3,4,5,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[15,-24,-25,-21,-25,15,15,15,15,15,15,-7,15,15,15,15,-8,15,15,15,15,15,15,-22,]),'LPAREN':([0,2,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'THEN':([3,4,5,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[18,-24,-25,-21,-25,18,18,18,-5,18,18,-7,18,18,18,-6,-8,18,18,18,18,18,18,-22,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[2,2,19,-24,-25,2,-21,-25,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,19,19,19,-5,19,19,-7,19,19,19,-6,-8,19,19,19,19,19,19,-22,]),'SUP':([3,4,5,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[21,-24,-25,-21,-25,21,21,21,-5,21,21,-7,21,21,21,-6,-8,21,21,21,21,21,21,-22,]),'RPAREN':([4,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,46,],[-24,-21,-25,46,-13,-20,-5,-9,-15,-7,-17,-12,-19,-6,-8,-10,-18,-14,-16,-11,-22,]),'OR':([3,4,5,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[24,-24,-25,-21,-25,24,24,24,-5,24,24,-7,24,24,24,-6,-8,24,24,24,24,24,24,-22,]),'PLUS':([3,4,5,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[11,-24,-25,-21,-25,11,11,11,-5,11,11,-7,11,11,11,-6,-8,11,11,11,11,11,11,-22,]),'AND':([3,4,5,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[16,-24,-25,-21,-25,16,16,16,-5,16,16,-7,16,16,16,-6,-8,16,16,16,16,16,16,-22,]),'DIVIDE':([3,4,5,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[20,-24,-25,-21,-25,20,20,20,20,20,20,-7,20,20,20,20,-8,20,20,20,20,20,20,-22,]),'SUPEG':([3,4,5,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[17,-24,-25,-21,-25,17,17,17,-5,17,17,-7,17,17,17,-6,-8,17,17,17,17,17,17,-22,]),'NUMBER':([0,2,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'NAME':([0,2,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,],[5,8,8,8,8,8,8,8,5,8,8,8,8,8,8,8,8,8,8,8,8,]),'$end':([0,1,3,4,5,7,8,14,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,],[-4,0,-2,-24,-25,-21,-25,-4,-13,-20,-5,-9,-15,-3,-7,-17,-12,-19,-6,-8,-10,-18,-14,-16,-11,-1,-22,]),'IF':([3,4,5,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[22,-24,-25,-21,-25,22,22,22,-5,22,22,-7,22,22,22,-6,-8,22,22,22,22,22,22,-22,]),'EG':([3,4,5,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[23,-24,-25,-21,-25,23,23,23,-5,23,23,-7,23,23,23,-6,-8,23,23,23,23,23,23,-22,]),'INF':([3,4,5,7,8,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[25,-24,-25,-21,-25,25,25,25,-5,25,25,-7,25,25,25,-6,-8,25,25,25,25,25,25,-22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,14,],[1,33,]),'expression':([0,2,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,],[3,7,27,28,29,30,31,32,3,34,35,36,37,38,39,40,41,42,43,44,45,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','calc.py',79),
  ('statement -> expression','statement',1,'p_statement_expr','calc.py',85),
  ('statement -> expression SEMICOLON statement','statement',3,'p_statement_expr','calc.py',86),
  ('statement -> <empty>','statement',0,'p_statement_expr','calc.py',87),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','calc.py',101),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','calc.py',102),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','calc.py',103),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','calc.py',104),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_aff','calc.py',118),
  ('expression -> expression SUP expression','expression',3,'p_expression_bool','calc.py',123),
  ('expression -> expression INF expression','expression',3,'p_expression_bool','calc.py',124),
  ('expression -> expression SUPEG expression','expression',3,'p_expression_bool','calc.py',125),
  ('expression -> expression INFEG expression','expression',3,'p_expression_bool','calc.py',126),
  ('expression -> expression EG expression','expression',3,'p_expression_bool','calc.py',127),
  ('expression -> expression NEG expression','expression',3,'p_expression_bool','calc.py',128),
  ('expression -> expression OR expression','expression',3,'p_expression_bool','calc.py',129),
  ('expression -> expression AND expression','expression',3,'p_expression_bool','calc.py',130),
  ('expression -> expression IF expression','expression',3,'p_statement_cond','calc.py',189),
  ('expression -> expression THEN expression','expression',3,'p_statement_cond','calc.py',190),
  ('expression -> expression ELSE expression','expression',3,'p_statement_cond','calc.py',191),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','calc.py',194),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calc.py',198),
  ('expression -> expression','expression',1,'p_expression_group','calc.py',199),
  ('expression -> NUMBER','expression',1,'p_expression_number','calc.py',204),
  ('expression -> NAME','expression',1,'p_expression_name','calc.py',208),
]
